name: CI - Build and Test

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*.*.*'  # Run tests on version tags before release/publish
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/Diiwo.Identity.csproj'

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: '**/test-results.trx'

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Check formatting
      run: dotnet format ${{ env.PROJECT_PATH }} --verify-no-changes --verbosity diagnostic
      continue-on-error: true

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "Build and test failed"
          exit 1
        fi
        if [ "${{ needs.code-quality.result }}" != "success" ] && [ "${{ needs.code-quality.result }}" != "skipped" ]; then
          echo "Code quality checks failed (non-critical)"
        fi
        echo "CI completed successfully"
